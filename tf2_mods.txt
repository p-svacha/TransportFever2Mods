result.layers:Distance: Apply this to a mask. Every point will receive the distance from the edge of the mask as its value.
result.layers.Map: Map the values of a map from a range to another range. If the last param is true, the values that were outside from the initial range are set to the limits of the new range 
Herp: Converts linear to smooth interpolation
Exlerp: Converts linear to exponentail interpolation
Grad: (last param = 2): Returns the first derivative of a map, meaning the steepness of each point
Laplace: Returns the second derivative of a map, meaning highlighting the edges (not that useful)
Percolation: Flood fills a white noise map

bounds go from - realSize / 2 to realSize / 2 (used by rivers)
mapSize is realSize / 4 (used by noise)

area: 12km x 12km
mapSize: 0 - 3000
bounds: -6000 - 6000

Mods to make:

Terrain Generator:
-------------------
todo
- multiple stalagmites (varying in height and radius) (maybe 4 in megalomaniac)
- stone circles (1 or 2 if large+)
- deserts if possible(check snow from uloc)?

OTHER GENERATORS
-------------------
Default: /
High Peaks: /
Desert Ext: /
Ultime Loca: /
Terrain Fever:  /
Temperate Ext: /
Tropical Ext: 


Dynamic Towns:
----------------
Spawn new Towns  (chance based on town density and amount of towns) https://transportfever2.com/wiki/api/modules/api.cmd.html  make.createTowns(towns)
Towns in danger of disappearing (warning that a town can disappear at any moment)
	- when no supplies
Chance that towns in danger suddenlly disappear (make.removeTown(townEntity))